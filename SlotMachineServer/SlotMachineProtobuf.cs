// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SlotMachineProtobuf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SlotMachineProtobuf {

  /// <summary>Holder for reflection information generated from SlotMachineProtobuf.proto</summary>
  public static partial class SlotMachineProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for SlotMachineProtobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SlotMachineProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlTbG90TWFjaGluZVByb3RvYnVmLnByb3RvEhNTbG90TWFjaGluZVByb3Rv",
            "YnVmItUDCghNYWluUGFjaxI1CgtyZXF1ZXN0Q29kZRgBIAEoDjIgLlNsb3RN",
            "YWNoaW5lUHJvdG9idWYuUmVxdWVzdENvZGUSMwoKYWN0aW9uQ29kZRgCIAEo",
            "DjIfLlNsb3RNYWNoaW5lUHJvdG9idWYuQWN0aW9uQ29kZRIzCgpyZXR1cm5D",
            "b2RlGAMgASgOMh8uU2xvdE1hY2hpbmVQcm90b2J1Zi5SZXR1cm5Db2RlEjEK",
            "CWxvZ2luUGFjaxgEIAEoCzIeLlNsb3RNYWNoaW5lUHJvdG9idWYuTG9naW5Q",
            "YWNrEgsKA3N0chgFIAEoCRI3Cgx1c2VySW5mb1BhY2sYBiABKAsyIS5TbG90",
            "TWFjaGluZVByb3RvYnVmLlVzZXJJbmZvUGFjaxI1CgtjbGFzc2ljUGFjaxgH",
            "IAEoCzIgLlNsb3RNYWNoaW5lUHJvdG9idWYuQ2xhc3NpY1BhY2sSPQoPY2xh",
            "c3NpY1JhdGVQYWNrGAggASgLMiQuU2xvdE1hY2hpbmVQcm90b2J1Zi5DbGFz",
            "c2ljUmF0ZVBhY2sSOQoNYm9udXNQb29sUGFjaxgJIAEoCzIiLlNsb3RNYWNo",
            "aW5lUHJvdG9idWYuQm9udXNQb29sUGFjayIbCglMb2dpblBhY2sSDgoGdXNl",
            "cmlkGAEgASgJIkoKDFVzZXJJbmZvUGFjaxINCgVsZXZlbBgBIAEoBRILCgNl",
            "eHAYAiABKAUSDAoEY29pbhgDIAEoAxIQCghsb2dpbkRheRgEIAEoBSLQAQoP",
            "Q2xhc3NpY1JhdGVQYWNrEi4KBGxpbmUYASADKAsyIC5TbG90TWFjaGluZVBy",
            "b3RvYnVmLktleUludFZhbHVlEkAKBmFwcGVhchgCIAMoCzIwLlNsb3RNYWNo",
            "aW5lUHJvdG9idWYuQ2xhc3NpY1JhdGVQYWNrLkFwcGVhckVudHJ5GksKC0Fw",
            "cGVhckVudHJ5EgsKA2tleRgBIAEoBRIrCgV2YWx1ZRgCIAEoCzIcLlNsb3RN",
            "YWNoaW5lUHJvdG9idWYuSW50TGlzdDoCOAEiVQoLQ2xhc3NpY1BhY2sSEAoI",
            "YmV0VmFsdWUYASABKAMSEgoKcmVzdWx0TnVtcxgCIAMoBRIPCgd3aW5Db2lu",
            "GAMgASgDEg8KB3dpbk51bXMYBCADKAUiogEKDUJvbnVzUG9vbFBhY2sSEAoI",
            "Z2FtZU5hbWUYASABKAkSEgoKYm9udXNWYWx1ZRgCIAEoAxITCgt3aW5OaWNr",
            "TmFtZRgDIAEoCRIRCgl3aW5JbWdVcmwYBCABKAkSEAoId2luVmFsdWUYBSAB",
            "KAMSMQoHYWxsUG9vbBgGIAMoCzIgLlNsb3RNYWNoaW5lUHJvdG9idWYuS2V5",
            "U3RyVmFsdWUiKQoLS2V5SW50VmFsdWUSCwoDa2V5GAEgASgFEg0KBXZhbHVl",
            "GAIgASgFIikKC0tleVN0clZhbHVlEgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoAyIZCgdJbnRMaXN0Eg4KBnZhbHVlcxgBIAMoBSoyCgtSZXF1ZXN0Q29k",
            "ZRIPCgtSZXF1ZXN0Tm9uZRAAEggKBFVzZXIQARIICgRHYW1lEAIqfQoKQWN0",
            "aW9uQ29kZRIOCgpBY3Rpb25Ob25lEAASCQoFTG9nb24QARIJCgVMb2dpbhAC",
            "Eg8KC0dldFVzZXJJbmZvEAMSEgoOR2V0Q2xhc3NpY1JhdGUQBBIRCg1DbGFz",
            "c2ljUmVzdWx0EAUSEQoNQm9udXNQb29sSW5mbxAGKkcKClJldHVybkNvZGUS",
            "DgoKUmV0dXJuTm9uZRAAEgsKB1N1Y2NlZWQQARIICgRGYWlsEAISEgoORHVw",
            "bGljYXRlTG9naW4QA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SlotMachineProtobuf.RequestCode), typeof(global::SlotMachineProtobuf.ActionCode), typeof(global::SlotMachineProtobuf.ReturnCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.MainPack), global::SlotMachineProtobuf.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "LoginPack", "Str", "UserInfoPack", "ClassicPack", "ClassicRatePack", "BonusPoolPack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.LoginPack), global::SlotMachineProtobuf.LoginPack.Parser, new[]{ "Userid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.UserInfoPack), global::SlotMachineProtobuf.UserInfoPack.Parser, new[]{ "Level", "Exp", "Coin", "LoginDay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.ClassicRatePack), global::SlotMachineProtobuf.ClassicRatePack.Parser, new[]{ "Line", "Appear" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.ClassicPack), global::SlotMachineProtobuf.ClassicPack.Parser, new[]{ "BetValue", "ResultNums", "WinCoin", "WinNums" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.BonusPoolPack), global::SlotMachineProtobuf.BonusPoolPack.Parser, new[]{ "GameName", "BonusValue", "WinNickName", "WinImgUrl", "WinValue", "AllPool" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.KeyIntValue), global::SlotMachineProtobuf.KeyIntValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.KeyStrValue), global::SlotMachineProtobuf.KeyStrValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.IntList), global::SlotMachineProtobuf.IntList.Parser, new[]{ "Values" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    ///用戶
    /// </summary>
    [pbr::OriginalName("User")] User = 1,
    /// <summary>
    ///遊戲
    /// </summary>
    [pbr::OriginalName("Game")] Game = 2,
  }

  /// <summary>
  ///執行方法名稱
  /// </summary>
  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///註冊
    /// </summary>
    [pbr::OriginalName("Logon")] Logon = 1,
    /// <summary>
    ///登入
    /// </summary>
    [pbr::OriginalName("Login")] Login = 2,
    /// <summary>
    ///獲取用戶訊息
    /// </summary>
    [pbr::OriginalName("GetUserInfo")] GetUserInfo = 3,
    /// <summary>
    ///獲取經典遊戲賠率
    /// </summary>
    [pbr::OriginalName("GetClassicRate")] GetClassicRate = 4,
    /// <summary>
    ///經典遊戲結果
    /// </summary>
    [pbr::OriginalName("ClassicResult")] ClassicResult = 5,
    /// <summary>
    ///獎池訊息
    /// </summary>
    [pbr::OriginalName("BonusPoolInfo")] BonusPoolInfo = 6,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("Succeed")] Succeed = 1,
    /// <summary>
    ///失敗
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
    /// <summary>
    ///重複登入
    /// </summary>
    [pbr::OriginalName("DuplicateLogin")] DuplicateLogin = 3,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      str_ = other.str_;
      userInfoPack_ = other.userInfoPack_ != null ? other.userInfoPack_.Clone() : null;
      classicPack_ = other.classicPack_ != null ? other.classicPack_.Clone() : null;
      classicRatePack_ = other.classicRatePack_ != null ? other.classicRatePack_.Clone() : null;
      bonusPoolPack_ = other.bonusPoolPack_ != null ? other.bonusPoolPack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "requestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::SlotMachineProtobuf.RequestCode requestCode_ = global::SlotMachineProtobuf.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "actionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::SlotMachineProtobuf.ActionCode actionCode_ = global::SlotMachineProtobuf.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "returnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::SlotMachineProtobuf.ReturnCode returnCode_ = global::SlotMachineProtobuf.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "loginPack" field.</summary>
    public const int LoginPackFieldNumber = 4;
    private global::SlotMachineProtobuf.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 5;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userInfoPack" field.</summary>
    public const int UserInfoPackFieldNumber = 6;
    private global::SlotMachineProtobuf.UserInfoPack userInfoPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.UserInfoPack UserInfoPack {
      get { return userInfoPack_; }
      set {
        userInfoPack_ = value;
      }
    }

    /// <summary>Field number for the "classicPack" field.</summary>
    public const int ClassicPackFieldNumber = 7;
    private global::SlotMachineProtobuf.ClassicPack classicPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ClassicPack ClassicPack {
      get { return classicPack_; }
      set {
        classicPack_ = value;
      }
    }

    /// <summary>Field number for the "classicRatePack" field.</summary>
    public const int ClassicRatePackFieldNumber = 8;
    private global::SlotMachineProtobuf.ClassicRatePack classicRatePack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ClassicRatePack ClassicRatePack {
      get { return classicRatePack_; }
      set {
        classicRatePack_ = value;
      }
    }

    /// <summary>Field number for the "bonusPoolPack" field.</summary>
    public const int BonusPoolPackFieldNumber = 9;
    private global::SlotMachineProtobuf.BonusPoolPack bonusPoolPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.BonusPoolPack BonusPoolPack {
      get { return bonusPoolPack_; }
      set {
        bonusPoolPack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if (Str != other.Str) return false;
      if (!object.Equals(UserInfoPack, other.UserInfoPack)) return false;
      if (!object.Equals(ClassicPack, other.ClassicPack)) return false;
      if (!object.Equals(ClassicRatePack, other.ClassicRatePack)) return false;
      if (!object.Equals(BonusPoolPack, other.BonusPoolPack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      if (userInfoPack_ != null) hash ^= UserInfoPack.GetHashCode();
      if (classicPack_ != null) hash ^= ClassicPack.GetHashCode();
      if (classicRatePack_ != null) hash ^= ClassicRatePack.GetHashCode();
      if (bonusPoolPack_ != null) hash ^= BonusPoolPack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LoginPack);
      }
      if (Str.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Str);
      }
      if (userInfoPack_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UserInfoPack);
      }
      if (classicPack_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ClassicPack);
      }
      if (classicRatePack_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClassicRatePack);
      }
      if (bonusPoolPack_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(BonusPoolPack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (userInfoPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfoPack);
      }
      if (classicPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassicPack);
      }
      if (classicRatePack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassicRatePack);
      }
      if (bonusPoolPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BonusPoolPack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::SlotMachineProtobuf.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
      if (other.userInfoPack_ != null) {
        if (userInfoPack_ == null) {
          UserInfoPack = new global::SlotMachineProtobuf.UserInfoPack();
        }
        UserInfoPack.MergeFrom(other.UserInfoPack);
      }
      if (other.classicPack_ != null) {
        if (classicPack_ == null) {
          ClassicPack = new global::SlotMachineProtobuf.ClassicPack();
        }
        ClassicPack.MergeFrom(other.ClassicPack);
      }
      if (other.classicRatePack_ != null) {
        if (classicRatePack_ == null) {
          ClassicRatePack = new global::SlotMachineProtobuf.ClassicRatePack();
        }
        ClassicRatePack.MergeFrom(other.ClassicRatePack);
      }
      if (other.bonusPoolPack_ != null) {
        if (bonusPoolPack_ == null) {
          BonusPoolPack = new global::SlotMachineProtobuf.BonusPoolPack();
        }
        BonusPoolPack.MergeFrom(other.BonusPoolPack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::SlotMachineProtobuf.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::SlotMachineProtobuf.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::SlotMachineProtobuf.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (loginPack_ == null) {
              LoginPack = new global::SlotMachineProtobuf.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 42: {
            Str = input.ReadString();
            break;
          }
          case 50: {
            if (userInfoPack_ == null) {
              UserInfoPack = new global::SlotMachineProtobuf.UserInfoPack();
            }
            input.ReadMessage(UserInfoPack);
            break;
          }
          case 58: {
            if (classicPack_ == null) {
              ClassicPack = new global::SlotMachineProtobuf.ClassicPack();
            }
            input.ReadMessage(ClassicPack);
            break;
          }
          case 66: {
            if (classicRatePack_ == null) {
              ClassicRatePack = new global::SlotMachineProtobuf.ClassicRatePack();
            }
            input.ReadMessage(ClassicRatePack);
            break;
          }
          case 74: {
            if (bonusPoolPack_ == null) {
              BonusPoolPack = new global::SlotMachineProtobuf.BonusPoolPack();
            }
            input.ReadMessage(BonusPoolPack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///註冊/登入包
  /// </summary>
  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      userid_ = other.userid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private string userid_ = "";
    /// <summary>
    ///用戶Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userid {
      get { return userid_; }
      set {
        userid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userid.Length != 0) hash ^= Userid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Userid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Userid.Length != 0) {
        Userid = other.Userid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Userid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用戶訊息包
  /// </summary>
  public sealed partial class UserInfoPack : pb::IMessage<UserInfoPack> {
    private static readonly pb::MessageParser<UserInfoPack> _parser = new pb::MessageParser<UserInfoPack>(() => new UserInfoPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack(UserInfoPack other) : this() {
      level_ = other.level_;
      exp_ = other.exp_;
      coin_ = other.coin_;
      loginDay_ = other.loginDay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack Clone() {
      return new UserInfoPack(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///等級
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    /// <summary>
    ///經驗值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private long coin_;
    /// <summary>
    ///金幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "loginDay" field.</summary>
    public const int LoginDayFieldNumber = 4;
    private int loginDay_;
    /// <summary>
    ///登入天數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDay {
      get { return loginDay_; }
      set {
        loginDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Coin != other.Coin) return false;
      if (LoginDay != other.LoginDay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Coin != 0L) hash ^= Coin.GetHashCode();
      if (LoginDay != 0) hash ^= LoginDay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Coin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Coin);
      }
      if (LoginDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LoginDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (LoginDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoPack other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Coin != 0L) {
        Coin = other.Coin;
      }
      if (other.LoginDay != 0) {
        LoginDay = other.LoginDay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt64();
            break;
          }
          case 32: {
            LoginDay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///經典模式賠率包
  /// </summary>
  public sealed partial class ClassicRatePack : pb::IMessage<ClassicRatePack> {
    private static readonly pb::MessageParser<ClassicRatePack> _parser = new pb::MessageParser<ClassicRatePack>(() => new ClassicRatePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassicRatePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicRatePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicRatePack(ClassicRatePack other) : this() {
      line_ = other.line_.Clone();
      appear_ = other.appear_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicRatePack Clone() {
      return new ClassicRatePack(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SlotMachineProtobuf.KeyIntValue> _repeated_line_codec
        = pb::FieldCodec.ForMessage(10, global::SlotMachineProtobuf.KeyIntValue.Parser);
    private readonly pbc::RepeatedField<global::SlotMachineProtobuf.KeyIntValue> line_ = new pbc::RepeatedField<global::SlotMachineProtobuf.KeyIntValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SlotMachineProtobuf.KeyIntValue> Line {
      get { return line_; }
    }

    /// <summary>Field number for the "appear" field.</summary>
    public const int AppearFieldNumber = 2;
    private static readonly pbc::MapField<int, global::SlotMachineProtobuf.IntList>.Codec _map_appear_codec
        = new pbc::MapField<int, global::SlotMachineProtobuf.IntList>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::SlotMachineProtobuf.IntList.Parser), 18);
    private readonly pbc::MapField<int, global::SlotMachineProtobuf.IntList> appear_ = new pbc::MapField<int, global::SlotMachineProtobuf.IntList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::SlotMachineProtobuf.IntList> Appear {
      get { return appear_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassicRatePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassicRatePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!line_.Equals(other.line_)) return false;
      if (!Appear.Equals(other.Appear)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= line_.GetHashCode();
      hash ^= Appear.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      line_.WriteTo(output, _repeated_line_codec);
      appear_.WriteTo(output, _map_appear_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += line_.CalculateSize(_repeated_line_codec);
      size += appear_.CalculateSize(_map_appear_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassicRatePack other) {
      if (other == null) {
        return;
      }
      line_.Add(other.line_);
      appear_.Add(other.appear_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            line_.AddEntriesFrom(input, _repeated_line_codec);
            break;
          }
          case 18: {
            appear_.AddEntriesFrom(input, _map_appear_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///經典模式包
  /// </summary>
  public sealed partial class ClassicPack : pb::IMessage<ClassicPack> {
    private static readonly pb::MessageParser<ClassicPack> _parser = new pb::MessageParser<ClassicPack>(() => new ClassicPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassicPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicPack(ClassicPack other) : this() {
      betValue_ = other.betValue_;
      resultNums_ = other.resultNums_.Clone();
      winCoin_ = other.winCoin_;
      winNums_ = other.winNums_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicPack Clone() {
      return new ClassicPack(this);
    }

    /// <summary>Field number for the "betValue" field.</summary>
    public const int BetValueFieldNumber = 1;
    private long betValue_;
    /// <summary>
    ///押注金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetValue {
      get { return betValue_; }
      set {
        betValue_ = value;
      }
    }

    /// <summary>Field number for the "resultNums" field.</summary>
    public const int ResultNumsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_resultNums_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> resultNums_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///結果編號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ResultNums {
      get { return resultNums_; }
    }

    /// <summary>Field number for the "winCoin" field.</summary>
    public const int WinCoinFieldNumber = 3;
    private long winCoin_;
    /// <summary>
    ///贏得金幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinCoin {
      get { return winCoin_; }
      set {
        winCoin_ = value;
      }
    }

    /// <summary>Field number for the "winNums" field.</summary>
    public const int WinNumsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_winNums_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> winNums_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///獲獎編號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WinNums {
      get { return winNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassicPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassicPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BetValue != other.BetValue) return false;
      if(!resultNums_.Equals(other.resultNums_)) return false;
      if (WinCoin != other.WinCoin) return false;
      if(!winNums_.Equals(other.winNums_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BetValue != 0L) hash ^= BetValue.GetHashCode();
      hash ^= resultNums_.GetHashCode();
      if (WinCoin != 0L) hash ^= WinCoin.GetHashCode();
      hash ^= winNums_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BetValue != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BetValue);
      }
      resultNums_.WriteTo(output, _repeated_resultNums_codec);
      if (WinCoin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WinCoin);
      }
      winNums_.WriteTo(output, _repeated_winNums_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BetValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetValue);
      }
      size += resultNums_.CalculateSize(_repeated_resultNums_codec);
      if (WinCoin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinCoin);
      }
      size += winNums_.CalculateSize(_repeated_winNums_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassicPack other) {
      if (other == null) {
        return;
      }
      if (other.BetValue != 0L) {
        BetValue = other.BetValue;
      }
      resultNums_.Add(other.resultNums_);
      if (other.WinCoin != 0L) {
        WinCoin = other.WinCoin;
      }
      winNums_.Add(other.winNums_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BetValue = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            resultNums_.AddEntriesFrom(input, _repeated_resultNums_codec);
            break;
          }
          case 24: {
            WinCoin = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            winNums_.AddEntriesFrom(input, _repeated_winNums_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///獎池包
  /// </summary>
  public sealed partial class BonusPoolPack : pb::IMessage<BonusPoolPack> {
    private static readonly pb::MessageParser<BonusPoolPack> _parser = new pb::MessageParser<BonusPoolPack>(() => new BonusPoolPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BonusPoolPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusPoolPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusPoolPack(BonusPoolPack other) : this() {
      gameName_ = other.gameName_;
      bonusValue_ = other.bonusValue_;
      winNickName_ = other.winNickName_;
      winImgUrl_ = other.winImgUrl_;
      winValue_ = other.winValue_;
      allPool_ = other.allPool_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusPoolPack Clone() {
      return new BonusPoolPack(this);
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 1;
    private string gameName_ = "";
    /// <summary>
    ///模式名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bonusValue" field.</summary>
    public const int BonusValueFieldNumber = 2;
    private long bonusValue_;
    /// <summary>
    ///獎池金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BonusValue {
      get { return bonusValue_; }
      set {
        bonusValue_ = value;
      }
    }

    /// <summary>Field number for the "winNickName" field.</summary>
    public const int WinNickNameFieldNumber = 3;
    private string winNickName_ = "";
    /// <summary>
    ///中獎人暱稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinNickName {
      get { return winNickName_; }
      set {
        winNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winImgUrl" field.</summary>
    public const int WinImgUrlFieldNumber = 4;
    private string winImgUrl_ = "";
    /// <summary>
    ///中獎人頭像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinImgUrl {
      get { return winImgUrl_; }
      set {
        winImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winValue" field.</summary>
    public const int WinValueFieldNumber = 5;
    private long winValue_;
    /// <summary>
    ///中獎金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinValue {
      get { return winValue_; }
      set {
        winValue_ = value;
      }
    }

    /// <summary>Field number for the "allPool" field.</summary>
    public const int AllPoolFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SlotMachineProtobuf.KeyStrValue> _repeated_allPool_codec
        = pb::FieldCodec.ForMessage(50, global::SlotMachineProtobuf.KeyStrValue.Parser);
    private readonly pbc::RepeatedField<global::SlotMachineProtobuf.KeyStrValue> allPool_ = new pbc::RepeatedField<global::SlotMachineProtobuf.KeyStrValue>();
    /// <summary>
    ///所有獎池訊息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SlotMachineProtobuf.KeyStrValue> AllPool {
      get { return allPool_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BonusPoolPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BonusPoolPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameName != other.GameName) return false;
      if (BonusValue != other.BonusValue) return false;
      if (WinNickName != other.WinNickName) return false;
      if (WinImgUrl != other.WinImgUrl) return false;
      if (WinValue != other.WinValue) return false;
      if(!allPool_.Equals(other.allPool_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (BonusValue != 0L) hash ^= BonusValue.GetHashCode();
      if (WinNickName.Length != 0) hash ^= WinNickName.GetHashCode();
      if (WinImgUrl.Length != 0) hash ^= WinImgUrl.GetHashCode();
      if (WinValue != 0L) hash ^= WinValue.GetHashCode();
      hash ^= allPool_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameName);
      }
      if (BonusValue != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BonusValue);
      }
      if (WinNickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WinNickName);
      }
      if (WinImgUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WinImgUrl);
      }
      if (WinValue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WinValue);
      }
      allPool_.WriteTo(output, _repeated_allPool_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (BonusValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BonusValue);
      }
      if (WinNickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinNickName);
      }
      if (WinImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinImgUrl);
      }
      if (WinValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinValue);
      }
      size += allPool_.CalculateSize(_repeated_allPool_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BonusPoolPack other) {
      if (other == null) {
        return;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.BonusValue != 0L) {
        BonusValue = other.BonusValue;
      }
      if (other.WinNickName.Length != 0) {
        WinNickName = other.WinNickName;
      }
      if (other.WinImgUrl.Length != 0) {
        WinImgUrl = other.WinImgUrl;
      }
      if (other.WinValue != 0L) {
        WinValue = other.WinValue;
      }
      allPool_.Add(other.allPool_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameName = input.ReadString();
            break;
          }
          case 16: {
            BonusValue = input.ReadInt64();
            break;
          }
          case 26: {
            WinNickName = input.ReadString();
            break;
          }
          case 34: {
            WinImgUrl = input.ReadString();
            break;
          }
          case 40: {
            WinValue = input.ReadInt64();
            break;
          }
          case 50: {
            allPool_.AddEntriesFrom(input, _repeated_allPool_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工具類
  /// </summary>
  public sealed partial class KeyIntValue : pb::IMessage<KeyIntValue> {
    private static readonly pb::MessageParser<KeyIntValue> _parser = new pb::MessageParser<KeyIntValue>(() => new KeyIntValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyIntValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIntValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIntValue(KeyIntValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIntValue Clone() {
      return new KeyIntValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyIntValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyIntValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyIntValue other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工具類
  /// </summary>
  public sealed partial class KeyStrValue : pb::IMessage<KeyStrValue> {
    private static readonly pb::MessageParser<KeyStrValue> _parser = new pb::MessageParser<KeyStrValue>(() => new KeyStrValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyStrValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyStrValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyStrValue(KeyStrValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyStrValue Clone() {
      return new KeyStrValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyStrValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyStrValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyStrValue other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工具類
  /// </summary>
  public sealed partial class IntList : pb::IMessage<IntList> {
    private static readonly pb::MessageParser<IntList> _parser = new pb::MessageParser<IntList>(() => new IntList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList(IntList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList Clone() {
      return new IntList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
