// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SlotMachineProtobuf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SlotMachineProtobuf {

  /// <summary>Holder for reflection information generated from SlotMachineProtobuf.proto</summary>
  public static partial class SlotMachineProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for SlotMachineProtobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SlotMachineProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlTbG90TWFjaGluZVByb3RvYnVmLnByb3RvEhNTbG90TWFjaGluZVByb3Rv",
            "YnVmIpoDCghNYWluUGFjaxI1CgtyZXF1ZXN0Q29kZRgBIAEoDjIgLlNsb3RN",
            "YWNoaW5lUHJvdG9idWYuUmVxdWVzdENvZGUSMwoKYWN0aW9uQ29kZRgCIAEo",
            "DjIfLlNsb3RNYWNoaW5lUHJvdG9idWYuQWN0aW9uQ29kZRIzCgpyZXR1cm5D",
            "b2RlGAMgASgOMh8uU2xvdE1hY2hpbmVQcm90b2J1Zi5SZXR1cm5Db2RlEjEK",
            "CWxvZ2luUGFjaxgEIAEoCzIeLlNsb3RNYWNoaW5lUHJvdG9idWYuTG9naW5Q",
            "YWNrEgsKA3N0chgFIAEoCRI3Cgx1c2VySW5mb1BhY2sYBiABKAsyIS5TbG90",
            "TWFjaGluZVByb3RvYnVmLlVzZXJJbmZvUGFjaxI1CgtjbGFzc2ljUGFjaxgH",
            "IAEoCzIgLlNsb3RNYWNoaW5lUHJvdG9idWYuQ2xhc3NpY1BhY2sSPQoPY2xh",
            "c3NpY1JhdGVQYWNrGAggASgLMiQuU2xvdE1hY2hpbmVQcm90b2J1Zi5DbGFz",
            "c2ljUmF0ZVBhY2siGwoJTG9naW5QYWNrEg4KBnVzZXJpZBgBIAEoCSJKCgxV",
            "c2VySW5mb1BhY2sSDQoFbGV2ZWwYASABKAUSCwoDZXhwGAIgASgFEgwKBGNv",
            "aW4YAyABKAUSEAoIbG9naW5EYXkYBCABKAUiMgoLQ2xhc3NpY1BhY2sSEgoK",
            "cmVzdWx0TnVtcxgBIAMoBRIPCgd3aW5Db2luGAIgASgFIikKC0tleUludFZh",
            "bHVlEgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBSIZCgdJbnRMaXN0Eg4K",
            "BnZhbHVlcxgBIAMoBSLQAQoPQ2xhc3NpY1JhdGVQYWNrEi4KBGxpbmUYASAD",
            "KAsyIC5TbG90TWFjaGluZVByb3RvYnVmLktleUludFZhbHVlEkAKBmFwcGVh",
            "chgCIAMoCzIwLlNsb3RNYWNoaW5lUHJvdG9idWYuQ2xhc3NpY1JhdGVQYWNr",
            "LkFwcGVhckVudHJ5GksKC0FwcGVhckVudHJ5EgsKA2tleRgBIAEoBRIrCgV2",
            "YWx1ZRgCIAEoCzIcLlNsb3RNYWNoaW5lUHJvdG9idWYuSW50TGlzdDoCOAEq",
            "MgoLUmVxdWVzdENvZGUSDwoLUmVxdWVzdE5vbmUQABIICgRVc2VyEAESCAoE",
            "R2FtZRACKmoKCkFjdGlvbkNvZGUSDgoKQWN0aW9uTm9uZRAAEgkKBUxvZ29u",
            "EAESCQoFTG9naW4QAhIPCgtHZXRVc2VySW5mbxADEhIKDkdldENsYXNzaWNS",
            "YXRlEAQSEQoNQ2xhc3NpY1Jlc3VsdBAFKkcKClJldHVybkNvZGUSDgoKUmV0",
            "dXJuTm9uZRAAEgsKB1N1Y2NlZWQQARIICgRGYWlsEAISEgoORHVwbGljYXRl",
            "TG9naW4QA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SlotMachineProtobuf.RequestCode), typeof(global::SlotMachineProtobuf.ActionCode), typeof(global::SlotMachineProtobuf.ReturnCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.MainPack), global::SlotMachineProtobuf.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "LoginPack", "Str", "UserInfoPack", "ClassicPack", "ClassicRatePack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.LoginPack), global::SlotMachineProtobuf.LoginPack.Parser, new[]{ "Userid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.UserInfoPack), global::SlotMachineProtobuf.UserInfoPack.Parser, new[]{ "Level", "Exp", "Coin", "LoginDay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.ClassicPack), global::SlotMachineProtobuf.ClassicPack.Parser, new[]{ "ResultNums", "WinCoin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.KeyIntValue), global::SlotMachineProtobuf.KeyIntValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.IntList), global::SlotMachineProtobuf.IntList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotMachineProtobuf.ClassicRatePack), global::SlotMachineProtobuf.ClassicRatePack.Parser, new[]{ "Line", "Appear" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    ///用戶
    /// </summary>
    [pbr::OriginalName("User")] User = 1,
    /// <summary>
    ///遊戲
    /// </summary>
    [pbr::OriginalName("Game")] Game = 2,
  }

  /// <summary>
  ///執行方法名稱
  /// </summary>
  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///註冊
    /// </summary>
    [pbr::OriginalName("Logon")] Logon = 1,
    /// <summary>
    ///登入
    /// </summary>
    [pbr::OriginalName("Login")] Login = 2,
    /// <summary>
    ///獲取用戶訊息
    /// </summary>
    [pbr::OriginalName("GetUserInfo")] GetUserInfo = 3,
    /// <summary>
    ///獲取經典遊戲賠率
    /// </summary>
    [pbr::OriginalName("GetClassicRate")] GetClassicRate = 4,
    /// <summary>
    ///經典遊戲結果
    /// </summary>
    [pbr::OriginalName("ClassicResult")] ClassicResult = 5,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("Succeed")] Succeed = 1,
    /// <summary>
    ///失敗
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
    /// <summary>
    ///重複登入
    /// </summary>
    [pbr::OriginalName("DuplicateLogin")] DuplicateLogin = 3,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      str_ = other.str_;
      userInfoPack_ = other.userInfoPack_ != null ? other.userInfoPack_.Clone() : null;
      classicPack_ = other.classicPack_ != null ? other.classicPack_.Clone() : null;
      classicRatePack_ = other.classicRatePack_ != null ? other.classicRatePack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "requestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::SlotMachineProtobuf.RequestCode requestCode_ = global::SlotMachineProtobuf.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "actionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::SlotMachineProtobuf.ActionCode actionCode_ = global::SlotMachineProtobuf.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "returnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::SlotMachineProtobuf.ReturnCode returnCode_ = global::SlotMachineProtobuf.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "loginPack" field.</summary>
    public const int LoginPackFieldNumber = 4;
    private global::SlotMachineProtobuf.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 5;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userInfoPack" field.</summary>
    public const int UserInfoPackFieldNumber = 6;
    private global::SlotMachineProtobuf.UserInfoPack userInfoPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.UserInfoPack UserInfoPack {
      get { return userInfoPack_; }
      set {
        userInfoPack_ = value;
      }
    }

    /// <summary>Field number for the "classicPack" field.</summary>
    public const int ClassicPackFieldNumber = 7;
    private global::SlotMachineProtobuf.ClassicPack classicPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ClassicPack ClassicPack {
      get { return classicPack_; }
      set {
        classicPack_ = value;
      }
    }

    /// <summary>Field number for the "classicRatePack" field.</summary>
    public const int ClassicRatePackFieldNumber = 8;
    private global::SlotMachineProtobuf.ClassicRatePack classicRatePack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotMachineProtobuf.ClassicRatePack ClassicRatePack {
      get { return classicRatePack_; }
      set {
        classicRatePack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if (Str != other.Str) return false;
      if (!object.Equals(UserInfoPack, other.UserInfoPack)) return false;
      if (!object.Equals(ClassicPack, other.ClassicPack)) return false;
      if (!object.Equals(ClassicRatePack, other.ClassicRatePack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      if (userInfoPack_ != null) hash ^= UserInfoPack.GetHashCode();
      if (classicPack_ != null) hash ^= ClassicPack.GetHashCode();
      if (classicRatePack_ != null) hash ^= ClassicRatePack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LoginPack);
      }
      if (Str.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Str);
      }
      if (userInfoPack_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UserInfoPack);
      }
      if (classicPack_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ClassicPack);
      }
      if (classicRatePack_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClassicRatePack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (userInfoPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfoPack);
      }
      if (classicPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassicPack);
      }
      if (classicRatePack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassicRatePack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::SlotMachineProtobuf.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SlotMachineProtobuf.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SlotMachineProtobuf.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::SlotMachineProtobuf.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
      if (other.userInfoPack_ != null) {
        if (userInfoPack_ == null) {
          UserInfoPack = new global::SlotMachineProtobuf.UserInfoPack();
        }
        UserInfoPack.MergeFrom(other.UserInfoPack);
      }
      if (other.classicPack_ != null) {
        if (classicPack_ == null) {
          ClassicPack = new global::SlotMachineProtobuf.ClassicPack();
        }
        ClassicPack.MergeFrom(other.ClassicPack);
      }
      if (other.classicRatePack_ != null) {
        if (classicRatePack_ == null) {
          ClassicRatePack = new global::SlotMachineProtobuf.ClassicRatePack();
        }
        ClassicRatePack.MergeFrom(other.ClassicRatePack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::SlotMachineProtobuf.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::SlotMachineProtobuf.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::SlotMachineProtobuf.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (loginPack_ == null) {
              LoginPack = new global::SlotMachineProtobuf.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 42: {
            Str = input.ReadString();
            break;
          }
          case 50: {
            if (userInfoPack_ == null) {
              UserInfoPack = new global::SlotMachineProtobuf.UserInfoPack();
            }
            input.ReadMessage(UserInfoPack);
            break;
          }
          case 58: {
            if (classicPack_ == null) {
              ClassicPack = new global::SlotMachineProtobuf.ClassicPack();
            }
            input.ReadMessage(ClassicPack);
            break;
          }
          case 66: {
            if (classicRatePack_ == null) {
              ClassicRatePack = new global::SlotMachineProtobuf.ClassicRatePack();
            }
            input.ReadMessage(ClassicRatePack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///註冊/登入包
  /// </summary>
  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      userid_ = other.userid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private string userid_ = "";
    /// <summary>
    ///用戶Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userid {
      get { return userid_; }
      set {
        userid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userid.Length != 0) hash ^= Userid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Userid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Userid.Length != 0) {
        Userid = other.Userid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Userid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用戶訊息包
  /// </summary>
  public sealed partial class UserInfoPack : pb::IMessage<UserInfoPack> {
    private static readonly pb::MessageParser<UserInfoPack> _parser = new pb::MessageParser<UserInfoPack>(() => new UserInfoPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack(UserInfoPack other) : this() {
      level_ = other.level_;
      exp_ = other.exp_;
      coin_ = other.coin_;
      loginDay_ = other.loginDay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack Clone() {
      return new UserInfoPack(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///等級
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    /// <summary>
    ///經驗值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private int coin_;
    /// <summary>
    ///金幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "loginDay" field.</summary>
    public const int LoginDayFieldNumber = 4;
    private int loginDay_;
    /// <summary>
    ///登入天數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDay {
      get { return loginDay_; }
      set {
        loginDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Coin != other.Coin) return false;
      if (LoginDay != other.LoginDay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (LoginDay != 0) hash ^= LoginDay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (LoginDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LoginDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (LoginDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoPack other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.LoginDay != 0) {
        LoginDay = other.LoginDay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            LoginDay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///經典模式包
  /// </summary>
  public sealed partial class ClassicPack : pb::IMessage<ClassicPack> {
    private static readonly pb::MessageParser<ClassicPack> _parser = new pb::MessageParser<ClassicPack>(() => new ClassicPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassicPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicPack(ClassicPack other) : this() {
      resultNums_ = other.resultNums_.Clone();
      winCoin_ = other.winCoin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicPack Clone() {
      return new ClassicPack(this);
    }

    /// <summary>Field number for the "resultNums" field.</summary>
    public const int ResultNumsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_resultNums_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> resultNums_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///結果編號
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ResultNums {
      get { return resultNums_; }
    }

    /// <summary>Field number for the "winCoin" field.</summary>
    public const int WinCoinFieldNumber = 2;
    private int winCoin_;
    /// <summary>
    ///贏得的金幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinCoin {
      get { return winCoin_; }
      set {
        winCoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassicPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassicPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resultNums_.Equals(other.resultNums_)) return false;
      if (WinCoin != other.WinCoin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= resultNums_.GetHashCode();
      if (WinCoin != 0) hash ^= WinCoin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resultNums_.WriteTo(output, _repeated_resultNums_codec);
      if (WinCoin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinCoin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resultNums_.CalculateSize(_repeated_resultNums_codec);
      if (WinCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCoin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassicPack other) {
      if (other == null) {
        return;
      }
      resultNums_.Add(other.resultNums_);
      if (other.WinCoin != 0) {
        WinCoin = other.WinCoin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            resultNums_.AddEntriesFrom(input, _repeated_resultNums_codec);
            break;
          }
          case 16: {
            WinCoin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Dictionary&lt;int, int>
  /// </summary>
  public sealed partial class KeyIntValue : pb::IMessage<KeyIntValue> {
    private static readonly pb::MessageParser<KeyIntValue> _parser = new pb::MessageParser<KeyIntValue>(() => new KeyIntValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyIntValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIntValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIntValue(KeyIntValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIntValue Clone() {
      return new KeyIntValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyIntValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyIntValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyIntValue other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Dictionary&lt;int, List&lt;int>>
  /// </summary>
  public sealed partial class IntList : pb::IMessage<IntList> {
    private static readonly pb::MessageParser<IntList> _parser = new pb::MessageParser<IntList>(() => new IntList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList(IntList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList Clone() {
      return new IntList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///經典模式賠率包
  /// </summary>
  public sealed partial class ClassicRatePack : pb::IMessage<ClassicRatePack> {
    private static readonly pb::MessageParser<ClassicRatePack> _parser = new pb::MessageParser<ClassicRatePack>(() => new ClassicRatePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassicRatePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotMachineProtobuf.SlotMachineProtobufReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicRatePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicRatePack(ClassicRatePack other) : this() {
      line_ = other.line_.Clone();
      appear_ = other.appear_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassicRatePack Clone() {
      return new ClassicRatePack(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SlotMachineProtobuf.KeyIntValue> _repeated_line_codec
        = pb::FieldCodec.ForMessage(10, global::SlotMachineProtobuf.KeyIntValue.Parser);
    private readonly pbc::RepeatedField<global::SlotMachineProtobuf.KeyIntValue> line_ = new pbc::RepeatedField<global::SlotMachineProtobuf.KeyIntValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SlotMachineProtobuf.KeyIntValue> Line {
      get { return line_; }
    }

    /// <summary>Field number for the "appear" field.</summary>
    public const int AppearFieldNumber = 2;
    private static readonly pbc::MapField<int, global::SlotMachineProtobuf.IntList>.Codec _map_appear_codec
        = new pbc::MapField<int, global::SlotMachineProtobuf.IntList>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::SlotMachineProtobuf.IntList.Parser), 18);
    private readonly pbc::MapField<int, global::SlotMachineProtobuf.IntList> appear_ = new pbc::MapField<int, global::SlotMachineProtobuf.IntList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::SlotMachineProtobuf.IntList> Appear {
      get { return appear_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassicRatePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassicRatePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!line_.Equals(other.line_)) return false;
      if (!Appear.Equals(other.Appear)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= line_.GetHashCode();
      hash ^= Appear.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      line_.WriteTo(output, _repeated_line_codec);
      appear_.WriteTo(output, _map_appear_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += line_.CalculateSize(_repeated_line_codec);
      size += appear_.CalculateSize(_map_appear_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassicRatePack other) {
      if (other == null) {
        return;
      }
      line_.Add(other.line_);
      appear_.Add(other.appear_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            line_.AddEntriesFrom(input, _repeated_line_codec);
            break;
          }
          case 18: {
            appear_.AddEntriesFrom(input, _map_appear_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
